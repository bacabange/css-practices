@import 'variables';

body {
  background: #fff;
  color: #333;
  font-size: 16px;
  // Escritura vertical!
  // writing-mode: vertical-rl;
}

.grid {
  display: grid;
  width: 100%;
  border: solid 1px red;
  // grid-template-columns: 100px 200px 100px;
  // grid-template-columns: min-content max-content fit-content(10em);
  // grid-template-columns: 50% 50%;
  // grid-template-columns: min-content max-content fit-content(10em);
  // grid-template-columns: 1fr 1fr 1fr 2fr;
  // grid-template-columns: 30px 1fr 1fr 1fr;

  // its the same sentence to create a container with 12 fractions:
  // grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
  // grid-template-columns: repeat(12, 1fr);
  // grid-template-columns: 1fr repeat(3,100px) 1fr

  // divir los elementos en columnas de 200px, cada vez que se achica el contenedor, los items pasan a la linea siguiente
  // grid-template-columns: repeat(auto-fill, 200px);

  // Autocrear las columnas, con un ancho minimo de 200px y si sobra espacio queda el último item con el ancho sobrante del contenedor
  // grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));

  // Autocrear las columnas, con un ancho minimo de 200px y si no hay más items, toma el ancho del contenedor
  // grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  // grid-template-columns: [main-start sidebar-start] 1fr [sidebar-end content-start] 4fr [content-end main-end]

  // Grid lines
  // grid-template-columns: repeat(5, 1fr);
  // grid-template-rows: repeat(5, 50px);

  // with names
  // grid-template-columns: [full-start] 1fr [main-start] 2fr 2fr [main-end full-end];

  // con nombres repetidos
  // grid-template-columns: repeat(4, [sm] 1fr [lg] 2fr);
  // grid-template-rows: repeat(5, 50px);

  // Con grid-area y nombres
  grid-template-areas:
    "one one one two"
    "one one one two"
    ". . four four"
    "three three four four";
  gap: 10px;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(4, 100px);
}

.item {
  // grid-column: 2 / 5;
  // grid-row: 2 / 5;

  // El mismo resultado
  // grid-area: 2 / 2 / 5 / 5;

  // with names
  // grid-column: main-start / main-end;

  // grid-column: sm 1 / lg 2;
  // grid-row: 1 / 4;
  // Con span coge la posición 1 desde start (3) y de ahí cuenta los span 4
  grid-column: 3 / span 4;
}

.grid > * {
  border: solid 1px blue;
  background: rgba($color: #000000, $alpha: .6)
}

.one {
  grid-area: one;
}

.two {
  grid-area: two;
}

.three {
  grid-area: three;
}

.four {
  grid-area: four;
}

.grid > .five {
  background-color: orange;
  // grid-row: 2 / 4;
  // grid-column: 2 / 4;

  grid-row: one-start / three-end;
  grid-column: three-start / four-start;
}